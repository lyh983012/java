package computer;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;
import java.math.BigDecimal;



class Computer<T> implements Compute<T>{

	private T result;
	private  StringBuffer exprssion =new StringBuffer();
	
	Computer(){
		Integer temp=0;
		this.result=(T)temp;
		System.out.println("Already prepared.");
	}
	public void get_expression() {
		
	}
	public void getresult() {
		System.out.println("the result is: "+ this.result.toString());
	}
	public void clear() {
		Integer temp=0;
		this.result=(T)temp;
		System.out.println("Already prepared.");
	}
	
	//四则运算的实现机制相同，只给plus注释了
	@Override
	public T puls(T a, T b) {

		BigDecimal T1=new BigDecimal(a.toString());	//使用高精度包进行类型转换
		BigDecimal T2=new BigDecimal(b.toString());	//使用高精度包进行类型转换
		if (b instanceof Long || b instanceof Short || b instanceof Integer) {
			T1.setScale(0);
			T2.setScale(0);							//如果是整形，设置小数为0位。
		}
		BigDecimal result=T1.add(T2);				//使用高精度包进行计算
		this.result=(T)result;						//类型转换为所需类型
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T plus(T b) {

		T result=puls(this.result , b);				//调用plus的重载
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T divide(T a, T b) {
		BigDecimal T1=new BigDecimal(a.toString());
		BigDecimal T2=new BigDecimal(b.toString());
		BigDecimal result=T1.divide(T2);
		if (b instanceof Long || b instanceof Short || b instanceof Integer) {
			T1.setScale(0);
			T2.setScale(0);
		}
		this.result=(T)result;
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T divide(T b) {
		T result=divide(this.result , b);
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T minus(T a, T b) {
		BigDecimal T1=new BigDecimal(a.toString());
		BigDecimal T2=new BigDecimal(b.toString());
		BigDecimal result=T1.subtract(T2);
		this.result=(T)result;
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T minus(T b) {
		T result=minus(this.result , b);
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T time(T a, T b) {
		BigDecimal T1=new BigDecimal(a.toString());
		BigDecimal T2=new BigDecimal(b.toString());
		BigDecimal result=T1.multiply(T2);
		this.result=(T)result;
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T time(T b) {
		T result=time(this.result , b);
		System.out.println("Result has been saved.");
		return this.result;
	}
	@Override
	public T factor(T n) {
		if (n instanceof Long || n instanceof Short || n instanceof Integer) {
			BigDecimal n1 = new BigDecimal(n.toString());
			BigDecimal I= new BigDecimal(1);
			for(BigDecimal i=new BigDecimal(2);0<n1.compareTo(i);i=i.add(I)) {
				n1=n1.multiply(i);
			}
		System.out.println("the result is: "+ n1.toString());
		try {
			this.result=(T)n1;
		}catch(Exception e) {
		
		}
		}else {
			System.out.println("illegal operation");		
		}	
		return this.result;
	}

	@Override
	public T pow(T a, T b) {
		BigDecimal T1=new BigDecimal(a.toString());	//使用高精度包进行类型转换
		BigDecimal T2=new BigDecimal(b.toString());	//使用高精度包进行类型转换
		if (b instanceof Long || b instanceof Short || b instanceof Integer) {
			T1.setScale(0);
			T2.setScale(0);							//如果是整形，设置小数为0位。
		}
		BigDecimal result=T1.pow(T2.intValue());				//使用高精度包进行计算
		this.result=(T)result;						//类型转换为所需类型
		System.out.println("Result has been saved.");
		return this.result;
	}



}
